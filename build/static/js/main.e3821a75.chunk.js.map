{"version":3,"sources":["ByteInput.tsx","StringInput.tsx","download-item.ts","store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Option","Select","ByteInput","value","onChange","exec","number","unit","onInputChange","n","u","className","val","parseFloat","undefined","map","key","StringInput","props","e","target","remainTime","item","size","download","speed","bytes","parse","reducer","items","action","type","id","Math","random","name","edit","makeDownalodItem","slice","idx","editItem","App","useReducer","dispatch","columns","title","dataIndex","component","c","EditCompnent","render","width","progress","toFixed","remain","prettyMs","style","marginRight","onClick","locale","zhCN","dataSource","rowKey","bordered","pagination","summary","data","length","total","t","reduce","totalSize","totalDownload","totalSpeed","totalRemain","max","format","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3821a75.chunk.js","sourcesContent":["import * as React from 'react'\nimport './byte-input.scss'\nimport { Select, InputNumber, } from 'antd'\n\nconst { Option } = Select;\n\ntype Props = { value: string, onChange: (val: string) => void}\n\nexport const ByteInput: React.FC<Props> = ({ value, onChange }) => {\n  const units = [ 'KB', 'MB', 'GB', 'Kb', 'Mb' ]\n  const [_, number , unit] = /^([\\d.]*)(\\w*)$/.exec(value) as any\n\n  const onInputChange = (n: number = number, u: string = unit) => {\n    return onChange(`${n}${u}`)\n  }\n\n  return (\n    <div className=\"byte-input\">\n      <InputNumber value={number} className=\"byte-number-input\"\n        onChange={(val) => onInputChange(parseFloat(val as any) || number)}></InputNumber>\n      <Select value={unit} className=\"byte-unit-input\"\n        onChange={(val) => onInputChange(undefined, val)}>\n        {\n          units\n            .map(value => <Option key={value} value={value}>{ value }</Option>)\n        }\n      </Select>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Input } from 'antd'\n\ntype InputProps = Input['props']\n\ninterface Props extends Omit<InputProps, 'onChange'> {\n  onChange: (value: string) => void\n}\n\nexport const StringInput: React.FC<Props> = (props) => {\n  return <Input {...props} onChange ={(e) => {\n    props.onChange && props.onChange(e.target.value)\n  }\n  }></Input>\n}\n","import bytes from \"bytes\";\n\nexport interface DownloadItem {\n  id: string,\n  name: string,\n  size: string,\n  download: string,\n  speed: string,\n  edit: DownloadItem | null,\n}\n\nexport function progress (item: DownloadItem): number {\n  const { size, download } = item\n  return bytes.parse(download) / bytes.parse(size) * 100\n}\n\nexport function remainTime (item: DownloadItem): number {\n  const { size, download, speed } = item\n  const nsize = bytes.parse(size)\n  const ndownload = bytes.parse(download)\n  const nspeed = bytes.parse(speed)\n\n  return (nsize - ndownload) / nspeed\n}\n\nexport function makeDownalodItem(): DownloadItem {\n  const item: DownloadItem = {\n    id: `${Math.random()}`,\n    name: '',\n    size: '100MB',\n    download: '0MB',\n    speed: '128KB',\n    edit: null,\n  }\n\n  item.edit = item;\n\n  return item;\n}","import { DownloadItem, makeDownalodItem } from \"./download-item\";\nimport { Reducer } from \"react\";\n\nexport const initialState = [] as DownloadItem[]\n\ntype State = typeof initialState\n\ntype Action =\n  | { type: 'new' }\n  | { type: 'remove', idx: number }\n  | { type: 'edit', idx: number, edit: boolean }\n  | { type: 'update-edit', idx: number, key: string, value: any, }\n  | { type: 'update', idx: number }\n  | { type: 'clear' }\n\nexport const reducer: Reducer<State, Action> = (items: State, action: Action) => {\n  switch(action.type) {\n    case 'new':\n      const newItem = makeDownalodItem();\n      return [ newItem, ...items ]\n    case 'remove': {\n      return [\n        ...items.slice(0, action.idx),\n        ...items.slice(action.idx + 1)\n      ]\n    }\n    case 'edit': {\n      const editItem = {\n        ...items[action.idx],\n        edit: null,\n      };\n\n      return [\n        ...items.slice(0, action.idx),\n        {\n          ...items[action.idx],\n          edit: action.edit ? editItem : null\n        },\n        ...items.slice(action.idx + 1)\n      ]\n    }\n    case 'update-edit':\n      const item = {\n        ...items[action.idx],\n        edit: {\n          ...items[action.idx].edit,\n          [action.key]: action.value,\n        } as DownloadItem\n      }\n      return [\n        ...items.slice(0, action.idx),\n        item,\n        ...items.slice(action.idx + 1)\n      ]\n    case 'update': {\n      const item = {\n        ...items[action.idx].edit as DownloadItem,\n        edit: null,\n      }\n      return [\n        ...items.slice(0, action.idx),\n        item,\n        ...items.slice(action.idx + 1)\n      ]\n    }\n    case 'clear':\n      return []\n  }    \n}\n","import React, {  useReducer } from 'react';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport { Table, Button, ConfigProvider } from 'antd';\nimport './App.scss';\nimport { ByteInput } from './ByteInput';\nimport { StringInput } from './StringInput';\nimport { DownloadItem, progress, remainTime } from './download-item';\nimport { reducer } from './store';\nimport prettyMs from 'pretty-ms'\nimport bytes from 'bytes';\n\n\nconst App: React.FC = () => {\n  \n  const [ items, dispatch ] = useReducer(reducer, []);\n\n  const makeColumn = (title: string, key: keyof DownloadItem, EditCompnent: any) => ({\n    title, dataIndex: key, render (val: any, item: DownloadItem, idx: number) {\n      if (item.edit) {\n        return (\n          <EditCompnent\n            value={ item.edit[key] }\n            onChange={(value: any) => dispatch({ type: 'update-edit', idx, key, value })} />\n        )\n      } else {\n        return val;\n      }\n    }\n  })\n\n  const columns = [\n    ...[\n      { title: '名称', dataIndex: 'name', component: StringInput},\n      { title: '文件大小', dataIndex: 'size', component: ByteInput },\n      { title: '已下载', dataIndex: 'download', component: ByteInput },\n      { title: '下载速度', dataIndex: 'speed', component: ByteInput },\n    ].map(c => makeColumn(c.title, c.dataIndex as keyof DownloadItem, c.component, )),\n    { title: '进度', dataIndex: 'progress', width: 90, render: (val: any, item: DownloadItem) => progress(item.edit || item).toFixed(2) + '%' },\n    { title: '剩余时间', dataIndex: 'remainTime', width: 120, render: (val: any, item: DownloadItem) => {\n      const remain = remainTime(item.edit || item)\n      return (\n        <>\n        { prettyMs(remain * 1000) }\n        </>\n      )\n    } },\n    { title: '操作', dataIndex: 'action', width: 150, render (val: any, item: DownloadItem, idx: number)  {\n      if (item.edit) {\n        return (<>\n          <Button size=\"small\" type=\"primary\" style={{marginRight: 15}}\n            onClick={() => dispatch({ type:'update', idx }) }>保存</Button>\n          <Button size=\"small\"\n            onClick={() => dispatch({ type: 'edit', idx, edit: false })}>取消</Button>\n        </>)\n      }\n      return (\n        <>\n          <Button size=\"small\" type=\"default\" style={{marginRight: 15}}\n            onClick={() => dispatch({ type: 'edit',  idx, edit: true, })}>\n              编辑\n          </Button>\n          <Button size=\"small\" type=\"danger\"\n            onClick={() => dispatch({ type: 'remove', idx })}>\n            删除\n          </Button>\n        </>\n      )\n    }}\n  ]\n\n  return (\n    <ConfigProvider locale={zhCN}>\n      <div className=\"app\">\n        <div className=\"table-wrapper\">\n          <div className=\"table-header\">\n            <Button type=\"primary\" onClick={() => dispatch({ type: 'new' })}>\n              添加\n            </Button>\n          </div>\n          <Table columns={columns} dataSource={items}\n            rowKey=\"name\"\n            bordered\n            pagination={false}\n            summary={(data: DownloadItem[]) => {\n              if (data.length === 0) {\n                return null\n              }\n\n              const total = (key: 'download' | 'size' | 'speed') => data.map(t => t.edit || t)\n              .reduce((total, item) => total + bytes.parse(item[key]), 0)\n              const totalSize = total('size')\n              const totalDownload = total('download')\n              const totalSpeed = total('speed')\n              const progress = totalDownload / totalSize * 100\n              const totalRemain = Math.max(...data.map(t => t.edit || t)\n                .map(item => remainTime(item)))\n\n              return (\n                <tr>\n                  <td>总计</td>\n                  <td>{bytes.format(totalSize) }</td>\n                  <td>{ bytes.format(totalDownload) }</td>\n                  <td>{ bytes.format(totalSpeed) }</td>\n                  <td>{ `${progress.toFixed(2)}%` }</td>\n                  <td>{ prettyMs(totalRemain * 1000) }</td>\n                  <td>\n                    <Button size=\"small\" onClick={() => {\n                      dispatch({ type: 'clear' })\n                    }}>清空</Button>\n                  </td>\n                </tr>\n              )\n            }}>\n          </Table>\n        </div>\n      </div>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}